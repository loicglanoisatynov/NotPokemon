using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using PokeWish.Classes;

namespace PokeWish.Services
{
    public class AuthService
    {
        private readonly AppDbContext _dbContext;

        public AuthService(AppDbContext dbContext)
        {
            _dbContext = dbContext;
        }
        public DbSet<Login> Logins { get; set; }

        // Méthode pour hasher les mots de passe
        private string HashPassword(string password)
        {
            using var sha256 = SHA256.Create();
            var bytes = Encoding.UTF8.GetBytes(password);
            var hash = sha256.ComputeHash(bytes);
            return Convert.ToBase64String(hash);
        }

        public AppDbContext Get_dbContext()
        {
            return _dbContext;
        }

        // Méthode de connexion
        public async Task<bool> LoginAsync(string username, string password, AppDbContext _dbContext)
        {
            if (_dbContext?.Login == null)
            {
                throw new ArgumentNullException(nameof(_dbContext.Login), "Logins DbSet cannot be null");
            }

            string hashedPassword = HashPassword(password);
            var user = await (_dbContext.Login ?? throw new InvalidOperationException("Logins DbSet is null"))
                                       .FirstOrDefaultAsync(l => l.Username == username
                                                              && l.PasswordHash == hashedPassword);
            // Microsoft.Data.SqlClient.SqlException : 'Nom d'objet 'Logins' non valide.'
            return user != null;
        }

        // Méthode d'enregistrement
        public async Task<bool> RegisterAsync(string username, string password)
        {
            // Vérifie si l'utilisateur existe déjà
            var existingUser = await (_dbContext.Login ?? throw new InvalidOperationException("Logins DbSet is null"))
                                                   .FirstOrDefaultAsync(l => l.Username == username);
            if (existingUser != null)
                return false;

            // Hashe le mot de passe
            string hashedPassword = HashPassword(password);

            // Ajoute le nouvel utilisateur
            var newUser = new Login
            {
                ID = 0, // Assuming ID is auto-generated by the database
                Username = username,
                PasswordHash = hashedPassword
            };

            _dbContext.Login.Add(newUser);
            await _dbContext.SaveChangesAsync();
            return true;
        }
    }
}
